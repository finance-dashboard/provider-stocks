// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CurrencyProviderClient is the client API for CurrencyProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyProviderClient interface {
	GetCurrency(ctx context.Context, in *TimeSlice, opts ...grpc.CallOption) (CurrencyProvider_GetCurrencyClient, error)
}

type currencyProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyProviderClient(cc grpc.ClientConnInterface) CurrencyProviderClient {
	return &currencyProviderClient{cc}
}

func (c *currencyProviderClient) GetCurrency(ctx context.Context, in *TimeSlice, opts ...grpc.CallOption) (CurrencyProvider_GetCurrencyClient, error) {
	stream, err := c.cc.NewStream(ctx, &CurrencyProvider_ServiceDesc.Streams[0], "/finance_dashboard.CurrencyProvider/GetCurrency", opts...)
	if err != nil {
		return nil, err
	}
	x := &currencyProviderGetCurrencyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CurrencyProvider_GetCurrencyClient interface {
	Recv() (*Value, error)
	grpc.ClientStream
}

type currencyProviderGetCurrencyClient struct {
	grpc.ClientStream
}

func (x *currencyProviderGetCurrencyClient) Recv() (*Value, error) {
	m := new(Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CurrencyProviderServer is the server API for CurrencyProvider service.
// All implementations must embed UnimplementedCurrencyProviderServer
// for forward compatibility
type CurrencyProviderServer interface {
	GetCurrency(*TimeSlice, CurrencyProvider_GetCurrencyServer) error
	mustEmbedUnimplementedCurrencyProviderServer()
}

// UnimplementedCurrencyProviderServer must be embedded to have forward compatible implementations.
type UnimplementedCurrencyProviderServer struct {
}

func (UnimplementedCurrencyProviderServer) GetCurrency(*TimeSlice, CurrencyProvider_GetCurrencyServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCurrency not implemented")
}
func (UnimplementedCurrencyProviderServer) mustEmbedUnimplementedCurrencyProviderServer() {}

// UnsafeCurrencyProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyProviderServer will
// result in compilation errors.
type UnsafeCurrencyProviderServer interface {
	mustEmbedUnimplementedCurrencyProviderServer()
}

func RegisterCurrencyProviderServer(s grpc.ServiceRegistrar, srv CurrencyProviderServer) {
	s.RegisterService(&CurrencyProvider_ServiceDesc, srv)
}

func _CurrencyProvider_GetCurrency_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TimeSlice)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CurrencyProviderServer).GetCurrency(m, &currencyProviderGetCurrencyServer{stream})
}

type CurrencyProvider_GetCurrencyServer interface {
	Send(*Value) error
	grpc.ServerStream
}

type currencyProviderGetCurrencyServer struct {
	grpc.ServerStream
}

func (x *currencyProviderGetCurrencyServer) Send(m *Value) error {
	return x.ServerStream.SendMsg(m)
}

// CurrencyProvider_ServiceDesc is the grpc.ServiceDesc for CurrencyProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance_dashboard.CurrencyProvider",
	HandlerType: (*CurrencyProviderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCurrency",
			Handler:       _CurrencyProvider_GetCurrency_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/currency_service.proto",
}
